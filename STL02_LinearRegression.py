import streamlit as st
import pickle
import pandas as pd
import requests

st.header("Python üêç Project Model")
st.write("Created by Feasible")

tab1, tab2 = st.tabs(["mtcars", "diabetes"])
with tab1:

    # URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .pkl ‡∏ö‡∏ô GitHub (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    model_url = 'https://raw.githubusercontent.com/anun311/py_code/refs/heads/main/mtcar_linear_reg_model.pkl'

    def load_model_from_github(url):
        try:
            response = requests.get(url)
            response.raise_for_status()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            model = pickle.loads(response.content)
            return model
        except requests.exceptions.RequestException as e:
            st.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}')
            return None
        except pickle.UnpicklingError as e:
            st.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {e}')
            return None

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model = load_model_from_github(model_url)

    inter_ = model.intercept_
    hp_coef = model.coef_[0]
    wt_coef = model.coef_[1]
    am_coef = model.coef_[2]

    # streamlit run STL02_LinearRegression.py
    st.header("Linear Regression is :blue[cool] :sunglasses:", divider=True)
    with st.chat_message("assistant"):
        st.write(f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö\n
        ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Linear Regression Model ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mtcars
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ MPG: Miles per Gallon ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô 1 ‡πÅ‡∏Å‡∏ô‡∏•‡∏≠‡∏ô 
    ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô (x) ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏° (y) ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà
        1) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤ 2) ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå ‡πÅ‡∏•‡∏∞ 3) ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå
    ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ ...
        - Observations: 32
        - R-squared: 0.840
        - Mean Squared Error: 5.634
        - Root Mean Squared Error: 2.374
    ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£ Linear Regression ‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
    mpg = {inter_} + ({hp_coef} x hp) 
        + ({wt_coef} x wt) + ({am_coef} x am)
    """)
        

    st.subheader("‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")

    col1, col2 = st.columns(2)
    with col1:
        hp_number = st.number_input("Horse Power", min_value=50.0, max_value=400.0, step=5.0)
        st.write("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤ (horsepower, hp):", hp_number)

        option = st.selectbox(
            "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå (Transmission)",
            ("0 = automatic", "1 = manual"),
            index=None,
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå",
        )
        st.write("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå (Transmission, am):", option)

    with col2:
        wt_number = st.number_input("Weight (‡∏Ñ‡∏π‡∏ì 1000 ‡∏õ‡∏≠‡∏ô‡∏î‡πå (lbs.))", min_value=1.0, max_value=6.0, step=1.0)
        st.write("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ñ (weight, wt):", wt_number, "‡∏õ‡∏≠‡∏ô‡∏î‡πå", round((float(wt_number)*1000*0.453592)/1000,2), "‡∏ï‡∏±‡∏ô")

        var_hp = float(hp_number)
        var_wt = float(wt_number)
        display_wt = round(var_wt * 1000, 2)
        display_wt2 = round((var_wt * 0.453592)/1000, 2)

        if option == "0 = automatic":
            var_am = 0
        elif option == "1 = manual":
            var_am = 1
        else:
            var_am = None

    if st.button("Predicted"):
        if var_am == None:
            st.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö', icon="üö®")
        else:
            display_wt = round(var_wt * 1000, 2)
            display_wt2 = round((var_wt*1000*0.453592)/1000, 2)

            mpg_ = inter_ + (hp_coef * var_hp) + (wt_coef * var_wt) + (am_coef * var_am)
            display_mpg = round(mpg_, 2)
            display_mpg2 = round(mpg_*1.609344, 2)

            with st.chat_message("assistant"):
                st.write(f""".\n
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
    - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {var_hp} ‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤
    - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ñ ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {display_wt} ‡∏õ‡∏≠‡∏ô‡∏î‡πå ‡∏´‡∏£‡∏∑‡∏≠ {display_wt2} ‡∏ï‡∏±‡∏ô
    - ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô {option} 
    ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏Å‡∏• {display_mpg} ‡πÑ‡∏°‡∏•‡πå ‡∏ï‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô 1 ‡πÅ‡∏Å‡∏ô‡∏•‡∏≠‡∏ô
    ‡∏´‡∏£‡∏∑‡∏≠ {display_mpg2} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£ ‡∏ï‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô 3.785 ‡∏•‡∏¥‡∏ï‡∏£ """)

with tab2:

    # URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .pkl ‡∏ö‡∏ô GitHub (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    model_log_url = 'https://raw.githubusercontent.com/anun311/py_code/refs/heads/main/diabetes_logistic_reg_model.pkl'

    def load_model_from_github(url):
        try:
            response = requests.get(url)
            response.raise_for_status()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            model = pickle.loads(response.content)
            return model
        except requests.exceptions.RequestException as e:
            st.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}')
            return None
        except pickle.UnpicklingError as e:
            st.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {e}')
            return None

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model_lg = load_model_from_github(model_log_url)

    lg_inter_ = model_lg.intercept_[0]
    coef_pregnancies = model_lg.coef_[0][0]
    coef_glucose = model_lg.coef_[0][1]
    coef_bp = model_lg.coef_[0][2]
    coef_bmi = model_lg.coef_[0][3]
    coef_dmpedfunc = model_lg.coef_[0][4]
    
    st.header("Logistic Regression is also :blue[cool] :stars:", divider=True)
    with st.chat_message("assistant"):
        st.write(f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö\n
    ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Logistic Regression Model ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• diabetes 
    ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏ç‡∏¥‡∏á‡∏ä‡∏≤‡∏ß Pima Indians ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Outcome: 0=‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô DM, 1=‡πÄ‡∏õ‡πá‡∏ô DM ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô (x) ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà
        1) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå 2) ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Å‡∏•‡∏π‡πÇ‡∏Ñ‡∏™‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î  3) ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á 
        4) ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI) ‡πÅ‡∏•‡∏∞ 5) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
    ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ ...
        - Observations: 154
        - Accuracy: 0.79
        - Precision: 0.63
        - Recall: 0.66
        - F1 Score: 0.64
    ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£ Linear Regression ‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
    Outcome = {lg_inter_} + ({coef_pregnancies} x pregnancies) 
        + ({coef_glucose} x glucose) + ({coef_bp} x bp) 
        + ({coef_bmi} x bmi) + ({coef_dmpedfunc} x diabetespedigreefunction)""")
        url = "https://feasibleth.com/"
        st.write("""‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î mini project ‡∏ô‡∏µ‡πâ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: %s """% url)
    
    st.subheader("‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")

    col1, col2 = st.columns(2)
    with col1:
        pregnancies_number = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå", min_value=0.0, max_value=20.0, step=1.0, value=6.0)
        st.write( "Pregnancies:", pregnancies_number)

        bp_number = st.number_input("‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á", min_value=60.0, max_value=125.0, step=5.0, value=62.0)
        st.write( "Blood pressure:", bp_number)

        dmpedfunc_number = st.number_input("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô", min_value=0.005, max_value=3.000, step=1.000, value=0.178)
        st.write( "Diabetes pedigree function:", round(dmpedfunc_number, 4))

    with col2:
        glucose_number = st.number_input("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Å‡∏•‡∏π‡πÇ‡∏Ñ‡∏™‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", min_value=50.0, max_value=220.0, step=1.0, value=162.0)
        st.write("Glucose:", glucose_number)

        bmi_number = st.number_input("‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)", min_value=10.0, max_value=70.0, step=1.0, value=24.3)
        st.write("BMI:", bmi_number)

        var_pregnancies = float(pregnancies_number)
        var_glucose = float(glucose_number)
        var_bp = float(bp_number)
        var_bmi = float(bmi_number)
        var_dmpedfunc = float(dmpedfunc_number)

    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤"):
        if var_pregnancies == None:
            st.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö', icon="üö®")
        else:
            outcome = lg_inter_ + (coef_pregnancies * var_pregnancies) + (coef_glucose * var_glucose) + (coef_bp * var_bp) + (coef_bmi * var_bmi) + (coef_dmpedfunc * var_dmpedfunc)
            # Sigmoid prob
            pred_prop = math.exp(outcome)/(1+math.exp(outcome))
            
            thershold = 0.5
            if pred_prop >= thershold: 
                pred_outcome_name = '‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô'
            else:
                pred_outcome_name = '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô'

            with st.chat_message("assistant"):
                st.write(f""".\n
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
        - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {int(pregnancies_number)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Å‡∏•‡∏π‡πÇ‡∏Ñ‡∏™‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {int(glucose_number)} mg/dL
        - ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {int(bp_number)} mmHg
        - ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI) ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {var_bmi}
        - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {round(dmpedfunc_number, 4)} mg/dL
    ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤ z ‡∏Ç‡∏≠‡∏á Linear Regression ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {round(outcome, 4)} 
    ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô Sigmoid probability ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {round(pred_prop, 4)} 
    ‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤ {pred_outcome_name}
    """)
